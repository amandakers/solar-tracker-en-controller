#include <Wire.h>
#include <Adafruit_MCP23X17.h>
#include <Adafruit_PWMServoDriver.h>

// ðŸ“¦ Hardware objecten
Adafruit_MCP23X17 mcp;
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

// Motorpinnen
#define LEFT_MOTOR_PWM 0
#define RIGHT_MOTOR_PWM 1
#define LEFT_MOTOR_DIR 2
#define RIGHT_MOTOR_DIR 3

// Bitvolgorde van rechter sensoren (PB3-PB7) omkeren
// PB3 (binnen) â†’ minst gewicht, PB7 (buiten) â†’ meest gewicht
static inline int swapValues(int val) {
  return ((val & 0x10) >> 4) | ((val & 0x08) >> 2) | (val & 0x04) |
         ((val & 0x02) << 2) | ((val & 0x01) << 4);
}


void stopMotors() {
  pwm.setPWM(LEFT_MOTOR_DIR, 0, 0);
  pwm.setPWM(RIGHT_MOTOR_DIR, 0, 0);
  pwm.setPWM(LEFT_MOTOR_PWM, 0, 0);
  pwm.setPWM(RIGHT_MOTOR_PWM, 0, 0);
}

void setup() {
  Serial.begin(115200);
  Wire.begin(21, 22); // SDA, SCL

  // Start MCP
  if (!mcp.begin_I2C(0x27)) {
    Serial.println("MCP23017 niet gevonden!");
    while (1);
  }

  // Zet alle 10 sensorpinnen als input
  int sensorPins[] = {0, 1, 2, 3, 4, 15, 13, 12, 11, 10};
  for (int i = 0; i < 10; i++) {
    mcp.pinMode(sensorPins[i], INPUT);
  }

  // Start PWM (motor driver)
  pwm.begin();
  pwm.setOscillatorFrequency(27000000);
  pwm.setPWMFreq(1600);
  Wire.setClock(400000);
  stopMotors();
}
void loop() {
  int baseSpeed = 2200;
  int left_value = 0;
  int right_value = 0;

  // Lees linker sensoren (PA0 - PA4)
  for (int i = 0; i < 5; i++) {
    int sensorState = !mcp.digitalRead(i); // zwart = actief
    left_value |= (sensorState << i);
  }

  // Lees rechter sensoren (PB3 - PB7 = pins 11 t/m 15)
  for (int i = 0; i < 5; i++) {
    int sensorState = !mcp.digitalRead(i + 11); // zwart = actief
    right_value |= (sensorState << i);
  }

  // Keer bitvolgorde om zodat PB3 = buiten, PB7 = binnen
  right_value = swapValues(right_value);

  // Debug output
  Serial.print("Links: ");
  Serial.print(left_value, BIN);
  Serial.print("  Rechts: ");
  Serial.print(right_value, BIN);

  // Als ALLE sensoren actief zijn (11111 links + 11111 rechts)
  if (left_value == 0b11111 && right_value == 0b11111) {
    Serial.println("Volledige lijn gedetecteerd â†’ rechtdoor!");
    pwm.setPWM(LEFT_MOTOR_DIR, 0, 4095);
    pwm.setPWM(RIGHT_MOTOR_DIR, 4095, 0);
    pwm.setPWM(LEFT_MOTOR_PWM, 0, baseSpeed);
    pwm.setPWM(RIGHT_MOTOR_PWM, 0, baseSpeed);
    delay(50);
    return;
  }

  // Geen lijn gedetecteerd?
  if (left_value == 0 && right_value == 0) {
    Serial.println("Geen lijn gedetecteerd, stoppen.");
    stopMotors();
    delay(100);
    return;
  }

  // Bereken lijnpositie (verschil)
  int line = right_value - left_value;  // bereik -31 tot +31
  Serial.print("  â†’ line: ");
  Serial.println(line);
  
    if ((right_value & 0b00001) == 0b00001 || (left_value & 0b10000) == 0b10000) {
    line *= 1.8;  // Versterk de correctie als een buitenste sensor geactiveerd is
  }
 if ((left_value & 0b10000) == 0b10000) {
    line *= 1.8;  // Versterk de correctie aan de linkerkant
  }
  // Pas waarde aan voor correctie
  line = map(line, -31, 31, -1700, 1700);

  // PWM waarden
  int leftSpeed  = constrain(baseSpeed - line, 0, 4095);
  int rightSpeed = constrain(baseSpeed + line, 0, 4095);

  pwm.setPWM(LEFT_MOTOR_DIR, 0, 4095);
  pwm.setPWM(RIGHT_MOTOR_DIR, 4095, 0);
  pwm.setPWM(LEFT_MOTOR_PWM, 0, leftSpeed);
  pwm.setPWM(RIGHT_MOTOR_PWM, 0, rightSpeed);

  delay(50);
}
